
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = "leftPLUSMINUSleftTIMESDIVIDErightUMINUSCALL COMMENT DEF DIVIDE DOUBLE_EQUAL ELSE EQUAL FALSE ID IF IS_LESS_THEN IS_MORE_THEN LPAREN L_BRACE MINUS NUMBER PLUS PRINT RPAREN R_BRACE STRING THEN TIMES TRUE VAR WHILE l_square_bracket r_square_bracketarray : ID EQUAL l_square_bracket  r_square_bracketcondition : IF LPAREN statement RPAREN L_BRACE expression R_BRACE ELSE L_BRACE expression R_BRACEarray : ID l_square_bracket NUMBER r_square_bracketcondition : IF LPAREN statement RPAREN L_BRACE expression R_BRACEstatement : ID EQUAL expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression TIMES expression\n                  | expression DIVIDE expressionexpression : '-' expression %prec UMINUSexpression : LPAREN expression RPARENexpression : NUMBERexpression : ID"
    
_lr_action_items = {'ID':([0,],[2,]),'$end':([1,7,8,],[0,-1,-3,]),'EQUAL':([2,],[3,]),'l_square_bracket':([2,3,],[4,5,]),'NUMBER':([4,],[6,]),'r_square_bracket':([5,6,],[7,8,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'array':([0,],[1,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> array","S'",1,None,None,None),
  ('array -> ID EQUAL l_square_bracket r_square_bracket','array',4,'p_array_declar','parse_array.py',8),
  ('condition -> IF LPAREN statement RPAREN L_BRACE expression R_BRACE ELSE L_BRACE expression R_BRACE','condition',11,'p_condition_if','parse_if.py',8),
  ('array -> ID l_square_bracket NUMBER r_square_bracket','array',4,'p_array_access','parse_array.py',14),
  ('condition -> IF LPAREN statement RPAREN L_BRACE expression R_BRACE','condition',7,'p_condition_if_else','parse_if.py',16),
  ('statement -> ID EQUAL expression','statement',3,'p_statement_assign','parse_statement.py',16),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parse_calc.py',21),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parse_calc.py',22),
  ('expression -> expression TIMES expression','expression',3,'p_expression_binop','parse_calc.py',23),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parse_calc.py',24),
  ('expression -> - expression','expression',2,'p_expression_uminus','parse_calc.py',36),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parse_calc.py',41),
  ('expression -> NUMBER','expression',1,'p_expression_number','parse_calc.py',46),
  ('expression -> ID','expression',1,'p_expression_name','parse_calc.py',51),
]
